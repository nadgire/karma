const validationSchema = Yup.object({
        comment: Yup.string()
            .test(
                'min-words',
                'Review must be at least 5 words long',
                (value) => value && value.trim().split(/\s+/).length >= 5
            )
            .required('Review is required'),
        reviewDocument: Yup.mixed().required('Document is required'),
    });

    async function handsubmit(values) {

        console.log("values: ", values);
        const payload = {
            overallRating: (Math.ceil((values.companyCulture + values.leadershipAndManagement + values.compensationAndBenefits + values.jobSatisfactionAndCareerGrowth + values.jobSecurityAndStability + values.diversityAndInclusion + values.workplaceFlexibility) / 7)),
            comment: values.comment,
            reviewDocument: "values.reviewDocument",
            factors: [
                {
                    "factorName": "companyCulture",
                    "rating": values.companyCulture
                },
                {
                    "factorName": "leadershipAndManagement",
                    "rating": values.leadershipAndManagement
                },
                {
                    "factorName": "compensationAndBenefits",
                    "rating": values.compensationAndBenefits
                },
                {
                    "factorName": "jobSatisfactionAndCareerGrowth",
                    "rating": values.jobSatisfactionAndCareerGrowth
                },
                {
                    "factorName": "jobSecurityAndStability",
                    "rating": values.jobSecurityAndStability
                },
                {
                    "factorName": "diversityAndInclusion",
                    "rating": values.diversityAndInclusion
                },
                {
                    "factorName": "workplaceFlexibility",
                    "rating": values.workplaceFlexibility
                }
            ],
        }
        console.log(payload);
        // const url = `http://13.61.233.178:8080/employee/${localStorage.getItem('user_id')}/company/${props.sendUserDetails.companyId}/review`;
        // console.log(url);
        // const response = await axios.post(url, payload, {
        //     headers: {
        //         'Content-Type': 'application/json',
        //         authorization: `Bearer ${localStorage.getItem('token')}`,
        //     }
        // },);
        fetch(`http://13.61.233.178:8080/employee/${localStorage.getItem('user_id')}/company/${props.sendUserDetails.companyId}/review`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                authorization: `Bearer ${localStorage.getItem('token')}`,
            },
            body: JSON.stringify(payload)
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            }
            )
            .then((data) => {
                console.log(data);
            }
            )
            .catch((error) => {
                console.error('There has been a problem with your fetch operation:', error);
            }
            );

        // Send the FormData to the server
    }

    return (
        <div className='bg-white w-full h-full rounded-4xl p-10 whitespace-nowrap'>
            <div className='text-center'>
                <span className='text-2xl'>Review your <strong>{props.sendUserDetails.companyId}</strong></span>
            </div>
            <div className='flex gap-10 p-10'>
                <Formik
                    initialValues={{
                        companyCulture: 0,
                        leadershipAndManagement: 0,
                        compensationAndBenefits: 0,
                        jobSatisfactionAndCareerGrowth: 0,
                        jobSecurityAndStability: 0,
                        diversityAndInclusion: 0,
                        workplaceFlexibility: 0,
                        comment: '',
                        reviewDocument: null,
                    }}
                    validationSchema={validationSchema}
                    onSubmit={(values) => {
                        handsubmit(values);
                    }}
                >
                    {({ values, setFieldValue, touched, errors }) => (
                        <Form className="w-full">
                            <div className='flex'>
                                <div className="w-[50%] flex flex-col gap-10">
                                    <span className="text-xl">Review factors</span>
                                    <div className="flex gap-8">
                                        <div className="flex flex-col gap-5">
                                            <span>Company Culture</span>
                                            <span>Leadership and Management</span>
                                            <span>Compensation and Benefits</span>
                                            <span>Job Satisfaction and Career Growth</span>
                                            <span>Job Security and Stability</span>
                                            <span>Diversity and Inclusion</span>
                                            <span>Workplace Flexibility</span>
                                        </div>
                                        <div className="flex flex-col gap-6 text-xl text-[#F95B15]">
                                            {/* Render Rating Stars */}
                                            {[
                                                'companyCulture',
                                                'leadershipAndManagement',
                                                'compensationAndBenefits',
                                                'jobSatisfactionAndCareerGrowth',
                                                'jobSecurityAndStability',
                                                'diversityAndInclusion',
                                                'workplaceFlexibility',
                                            ].map((field, index) => (
                                                <div key={index} className="flex gap-4  ">
                                                    {[...Array(5)].map((_, starIndex) => (
                                                        <FaStar
                                                            key={starIndex}
                                                            onClick={() => setFieldValue(field, starIndex + 1)}
                                                            color={values[field] > starIndex ? '#F95B15' : 'gray'}
                                                        />
                                                    ))}
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                </div>

                                <div className="w-[50%] space-y-10">
                                    <div className="flex flex-col gap-10">
                                        <label htmlFor="comment" className="text-xl">
                                            Review in words
                                        </label>
                                        <Field
                                            as="textarea"
                                            id="comment"
                                            name="comment"
                                            className="w-[80%] h-36 border-2 rounded-2xl p-2 border-[#F95B15]"
                                            placeholder="Write minimum 20 words review..."
                                        />
                                        <ErrorMessage
                                            name="comment"
                                            component="div"
                                            className="text-red-500"
                                        />
                                    </div>

                                    <div>
                                        <span>Review document: </span>
                                        <input
                                            type="file"
                                            name="reviewDocument"
                                            onChange={(event) =>
                                                setFieldValue('reviewDocument', event.currentTarget.files[0])
                                            }
                                        />
                                        <ErrorMessage
                                            name="reviewDocument"
                                            component="div"
                                            className="text-red-500"
                                        />
                                    </div>

                                    <div className="text-xl">
                                        <span id='overallRating' name='overallRating'>
                                            Average rating (Out of 5): <label id='overallRating' name='overallRating'>{(Math.ceil((values.companyCulture + values.leadershipAndManagement + values.compensationAndBenefits + values.jobSatisfactionAndCareerGrowth + values.jobSecurityAndStability + values.diversityAndInclusion + values.workplaceFlexibility) / 7))}</label>
                                        </span>
                                    </div>


                                </div>
                            </div>
                            <div className="text-center mt-16">
                                <button
                                    type="submit"
                                    className="px-10 py-2 bg-[#F95B15] text-white font-semibold rounded-3xl"
                                >
                                    Submit
                                </button>
                            </div>
                        </Form>
                    )}
                </Formik>
            </div>
        </div>
    )